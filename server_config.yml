--- 

- hosts: web_servers
  become: true
  pre_tasks:
     
   - name: Update cache (Ubuntu)
     apt:
      update_cache: yes
     changed_when: false
     when: ansible_distribution == "Ubuntu"

   - name: Update cache (Oracle Linux)
     dnf:
       update_cache: yes
     changed_when: false
     when: ansible_distribution == "OracleLinux"

  tasks:

   - name: Install apache2 and support packages (Ubuntu)
     apt:
      name:
        - apache2
        - libapache2-mod-php
      state: latest
     when: ansible_distribution == "Ubuntu"

   - name: Install apache2 and support packages (Oracle Linux)
     dnf:
      name:
        - httpd
        - php
      state: latest
     when: ansible_distribution == "OracleLinux"

   - name: Start and enable apache (Oracle Linux)
     service:
       name: httpd
       state: started
       enabled: yes
     when: ansible_distribution == "OracleLinux"


   - name: Change email address for Admin (Oracle Linux)
     lineinfile:
       path: /etc/httpd/conf/httpd.conf
       regexp: "^ServerAdmin"
       line: ServerAdmin martin.mato@ingrydacademy.com
     when: ansible_distribution == "OracleLinux"
     register: email

   - name: restart apache (Oracle Linux)
     service:
      name: httpd
      state: restarted
     when: ansible_distribution == "OracleLinux" and email.changed


   - name: Change email address for Admin (Ubuntu)
     lineinfile:
       path: /etc/apache2/sites-available/000-default.conf
       regexp: "ServerAdmin"
       line: ServerAdmin martin.mato@ingrydacademy.com
     when: ansible_distribution == "Ubuntu"
     register: apache

   - name: restart apache (Ubuntu)
     service:
      name: apache2
      state: restarted
     when: ansible_distribution == "Ubuntu" and apache.changed


   - name: Configure Firewall for web_servers (Ubuntu)
     ufw:
       state: enabled
       rule: allow
       name: '{{ item }}'
     with_items:
       - "Apache Full"
       - "OpenSSH"
     when: ansible_distribution == "Ubuntu"
     register: ufw    

   - name: Enable Firewall (Ubuntu)
     service:
       name: ufw
       state: restarted
       enabled: yes
     when: ansible_distribution == "Ubuntu" and ufw.changed

   - name: Configure Firewall for web_servers (Oracle Linux)
     firewalld:
       service: '{{ item }}'
       permanent: yes
       state: enabled
     with_items:
       - http
       - https
       - ssh
     when: ansible_distribution == "OracleLinux"
     register: firewalld

   - name: Enable Firewall (Oracle Linux)
     service:
       name: firewalld
       state: restarted
       enabled: yes
     when: ansible_distribution == "OracleLinux" and firewalld.changed

- name: Configure database servers
  hosts: db_servers
  become: yes
  
  tasks:
    - name: Install MySQL on Ubuntu
      package:
        name: mysql-server
        state: latest


    - name: Start and enable MySQL on Ubuntu
      service:
        name: mysql
        state: started
        enabled: yes
      when: ansible_distribution == 'Ubuntu'

    - name: Start and enable MySQL on OracleLinux
      service:
        name: mysqld
        state: started
        enabled: yes
      when: ansible_distribution == 'OracleLinux'


    - name: Set MySQL root password on Ubuntu
      mysql_user:
        name: root
        password: mySQLingryd
        host: localhost
      when: ansible_distribution == 'Ubuntu'

    - name: Set MySQL root password on OracleLinux
      mysql_user:
        name: root
        password: mySQLingryd
        login_unix_socket: yes
      when: ansible_distribution == 'OracleLinux'


- name: File Servers
  hosts: file_servers
  become: yes
  tasks:
   
  - name: Install samba on every file server
    package:
      name: samba
      state: latest

  - name: Start and enable samba
    service: 
      name: samba
      state: started
      enabled: yes


  - name: Configure Firewall for samba (Ubuntu)
    ufw:
      name: "Samba"
      rule: allow
    when: ansible_distribution == "Ubuntu"

  - name: Configure Firewall for Samba (Oracle Linux)
    firewalld:
      service: samba
      permanent: yes
    when: ansible_distribution == "OracleLinux"

  
  - name: Copy admin_manual to each node
    copy:
      src: admin_manual
      dest: /usr/local/bin/admin_manual
      owner: admin1
      group: admin1
      mode: 0440


  - name: Download Pycharm Community Edition to each node
    get_url:
      url: "https://download.jetbrains.com/python/pycharm-community-2021.3.1.tar.gz"
      dest: /usr/local/bin/pycharm-community-2021.3.1.tar.gz
